apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "10902"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/name: thanos-rule
  name: thanos-rule
spec:
  ports:
    - port: 10902
      protocol: TCP
      targetPort: http
      name: http-rule
    - port: 10901
      protocol: TCP
      targetPort: grpc
      name: grpc-rule
  selector:
    app.kubernetes.io/name: thanos-rule
  sessionAffinity: None
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-rule
  labels:
    app.kubernetes.io/name: thanos-rule
spec:
  serviceName: thanos-rule
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: thanos-rule
  template:
    metadata:
      labels:
        app.kubernetes.io/name: thanos-rule
    spec:
      containers:
        - name: thanos-rule
          image: thanos
          args:
            - rule
            - --log.level=warn
            - --data-dir=/var/thanos/data/
            - --rule-file=/var/thanos/rules/*.yaml
            - --eval-interval=30s
            - --alertmanagers.url=$(ALERTMANAGER_URL)
            - --query.sd-files=/etc/thanos/query-sd.yaml
            - --label=rule_replica="$(NAME)"
            - --alert.label-drop="rule_replica"
            - --objstore.config-file=/etc/thanos/config.yaml
          env:
            - name: NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ALERTMANAGER_URL
              valueFrom:
                secretKeyRef:
                  name: thanos-rule-alertmanager
                  key: alertmanager-url
            - name: CLUSTER
              valueFrom:
                configMapKeyRef:
                  name: cluster-label # set in cluster overlay-specific configmap
                  key: CLUSTER
          ports:
            - name: http
              containerPort: 10902
            - name: grpc
              containerPort: 10901
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
            failureThreshold: 5
          volumeMounts:
            - name: data
              mountPath: /var/thanos/data
            - name: rules
              mountPath: /var/thanos/rules
            - name: config
              mountPath: /etc/thanos/query-sd.yaml
              subPath: query-sd.yaml
            - name: thanos-storage
              mountPath: /etc/thanos/config.yaml
              subPath: config.yaml
          resources:
            requests:
              cpu: 0m
              memory: 64Mi
            limits:
              cpu: 2000m
              memory: 500Mi
      securityContext:
        fsGroup: 1001
      volumes:
        - name: rules
          configMap:
            defaultMode: 420
            name: alerts
        - name: config
          configMap:
            name: thanos-rule
        - name: thanos-storage
          configMap:
            name: thanos-storage
      serviceAccountName: thanos-s3-serviceaccount
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          ebs.csi.aws.com/volumeType: gp3
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: thanos-rule
  labels:
    app.kubernetes.io/name: thanos-rule
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: thanos-rule
  minAvailable: 1
